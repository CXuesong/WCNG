{"version":3,"sources":["src/script/wcng/localization.ts"],"names":[],"mappings":";;;;;;;YAMA;gBAKI,mCAAY,MAAc;oBAJlB,gBAAW,GAAiC,EAAE,CAAC;oBAC/C,gBAAW,GAAgD,EAAE,CAAC;oBAIlE,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBAC/B,CAAC;gBAIM,iDAAa,GAApB,UAAqB,KAAc;oBAAnC,iBAcC;oBAZG,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,WAAW,CAAC;wBAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;oBAC5D,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;wBAAC,KAAK,GAAG,EAAE,CAAC;oBACvB,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;oBAC5B,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CACjC,CAAC;wBACG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;wBAC/B,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC,UAAA,IAAI;4BACpC,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;4BACxD,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;4BAC/B,KAAI,CAAC,kBAAkB,EAAE,CAAC;wBAC1B,CAAC,CAAC,CAAC,CAAC;oBACZ,CAAC;gBACL,CAAC;gBAEM,6CAAS,GAAhB,UAAiB,GAAW;oBACxB,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;oBACjD,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;gBACnC,CAAC;gBAEM,uDAAmB,GAA1B,UAA2B,GAAW;oBAClC,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;oBAC9B,EAAE,CAAC,CAAC,CAAC,CAAC;wBAAC,MAAM,CAAC,CAAC,CAAC;oBAChB,IAAI,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;oBAC7B,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,EAAE,GAAG,EAAE,GAAG,MAAI,GAAG,MAAG,CAAC,CAAC;oBACxC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBAC1B,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC;gBAEM,sDAAkB,GAAzB;oBAEI,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,CACjC,CAAC;wBACG,IAAI,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;wBAC7B,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;wBACvB,EAAE,CAAC,CAAC,EAAE,CAAC;4BAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;oBACtC,CAAC;gBACL,CAAC;gBAEO,0DAAsB,GAA9B,UAA+B,MAAc,EAAE,QAAiC;oBAC5E,IAAI,IAAI,GAAG,mBAAmB,CAAC;oBAC/B,EAAE,CAAC,CAAC,MAAM,CAAC;wBAAC,IAAI,IAAI,GAAG,GAAG,MAAM,CAAC;oBACjC,CAAC,CAAC,OAAO,CAAI,IAAI,eAAY,EAAE,UAAC,IAAc,EAAE,UAAU,EAAE,KAAK,IAAK,OAAA,QAAQ,CAAC,IAAI,CAAC,EAAd,CAAc,CAAC,CAAC;gBAC1F,CAAC;gBACL,gCAAC;YAAD,CAxDA,AAwDC,IAAA;;QAED,CAAC","file":"localization.js","sourcesContent":["/// <reference path=\"../../../typings/index.d.ts\"/>\r\n\r\nimport * as Schemas from \"./schemas\"\r\n\r\ntype TextDict = {[key: string]: string};\r\n\r\nexport class LocalizedResourceProvider {\r\n    private loadedDicts: {[locale: string]: TextDict} = {};\r\n    private observables: {[key: string]: KnockoutObservable<string>} = {};\r\n    private _currentLocale: string;\r\n\r\n    constructor(locale: string) {\r\n        this.currentLocale(locale);\r\n    }\r\n\r\n    public currentLocale(): string;\r\n    public currentLocale(value: string): void;\r\n    public currentLocale(value?: string)\r\n    {\r\n        if (typeof value == \"undefined\") return this._currentLocale;\r\n        if (!value) value = \"\";\r\n        this._currentLocale = value;\r\n        if (!(value in this.loadedDicts))\r\n        {\r\n            this.loadedDicts[value] = null;\r\n            this.fetchResourceDictAsync(value, (dict => {\r\n                console.debug(\"Loaded resource dictionary for \", value);\r\n                this.loadedDicts[value] = dict;\r\n                this.refreshObservables();\r\n                }));\r\n        }\r\n    }\r\n\r\n    public getString(key: string) {\r\n        var dict = this.loadedDicts[this._currentLocale];\r\n        return dict ? dict[key] : null;\r\n    }\r\n\r\n    public getObservableString(key: string) {\r\n        let v = this.observables[key];\r\n        if (v) return v;\r\n        let lv = this.getString(key);\r\n        v = ko.observable(lv ? lv : `[${key}]`);\r\n        this.observables[key] = v;\r\n        return v;\r\n    }\r\n\r\n    public refreshObservables()\r\n    {\r\n        for (let key in this.observables)\r\n        {\r\n            let lv = this.getString(key);\r\n            console.debug(key, lv);\r\n            if (lv) this.observables[key](lv);\r\n        }\r\n    }\r\n\r\n    private fetchResourceDictAsync(locale: string, callback: (dict: TextDict) => any) {\r\n        let path = \"data/localization\";\r\n        if (locale) path += \"/\" + locale;\r\n        $.getJSON(`${path}/text.json`, (data: TextDict, textStatus, jqXHR) => callback(data));\r\n    }\r\n}\r\n\r\n"]}